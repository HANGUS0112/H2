%updated 2023/11/20 "III_binalize.m"で生成した白黒火炎から燃焼速度を計算するソフトに書き換えた．
                   %The software was rewritten to calculate the combustion rate 
                   % from the black-and-white flame generated by "III_binalize.m".
%by Shirayama

%% *******************INPUTS FROM THE RESEARCHER***************
%input the correct folder name. The folder name must be same as general file name
filename = 'hyd_20_01_298_l0';

%input frame rate
%AVIファイルのフレームレート．CINEファイルではない
Hz = 20000;

%input the serial number of the final experiment
%解析対象の実験回目
exp = 1;

%================== make fat plug image =======================
disp '************************ START **************************'
file = fullfile(filename,num2str(exp), ['Scale_perfect_circle' num2str(exp) '.tif']);
imscale= imread(file);

%----解像度の確認
[numRows,numCols] = size(imscale);
if numRows==numCols
    Rez=numRows;
else
    msgbox("解像度が縦横で一致しないよ")
    return            
end
%----
answer=questdlg(['Frame Rate' num2str(Hz) 'Hz & Rez' num2str(Rez) '^2 pixcel OK?????'],'FRAME RATE CHECK','Yes','No','Yes');
switch answer
    case 'Yes'
        %================== window circle 80^2*pi mm^2 =======================
        imscale=logical(imscale);
        [centers, CircleRadius] = imfindcircles(imscale, [260,340], 'ObjectPolarity','bright', 'Sensitivity', 0.94,'Method', 'twostage');
        viscircles(centers, CircleRadius,'EdgeColor','b'); 
            
        fullname = fullfile(filename,num2str(exp),['Scale_perfect_circle' num2str(exp) '.tif']);
        imwrite(imscale,fullname);
            
        WindowArea2 = cell2mat((struct2cell(regionprops(imscale, 'Area'))));
        mm_pix = 80*80 * pi/WindowArea2;  %6400
        
        %================== read number of photo =======================
        
        numImg=readmatrix(fullfile(filename,num2str(exp), 'number_of_photo.txt'));   %read the number_of_photo
            
        %% ********************* initializing output variables ***********
            
        Radius = zeros(numImg,1);
        t = zeros(numImg,1);
        Result = zeros(numImg,8);
        serial_no = zeros(numImg,1);
        LargestDiameter=zeros(numImg,1);
        SmallestDiameter=zeros(numImg,1);
        RatioOfDiameters=zeros(numImg,1);
        Perimeter=zeros(numImg,1);
        Roundness=zeros(numImg,1);
            
        %% **********************image processing loop***********************          
        for n = 0:numImg  % loops through all the images
        % processing the background image
            if n == 0      
            %disp([filename '_' num2str(exp) '_00000.txt (the background) is being processed...'])
                file = fullfile(filename,num2str(exp),[filename '_sch_' num2str(exp)]);
                FlameArea = 0;
                Radius(1,1) = 0;       
            % processing other images
            elseif n>0
                disp([num2str(exp) '_' num2str(n)])
                if n<10
                    num3 = ['0000' sprintf('%d',n)];
                elseif n<100
                    num3 = ['000' sprintf('%d',n)];
                elseif n<1000
                    num3 = ['00' sprintf('%d',n)];
                elseif n<10000
                    num3 = ['0' sprintf('%d',n)];
                else
                    num3 = ['' sprintf('%d',n)];
                end

                image_flame_plug = imread([file '_' num3 '_compare.tif']);
                figure(1),imshow(image_flame_plug),title('target_image');
                image_flame_plug = imread([file '_' num3 '_bw.tif']);
                image_original=logical(image_flame_plug);
                
        %↑ made by Shirayama
        %=============================================================================
        %=============================================================================
        %↓ made by Okafor
        
                FlameArea = cell2mat(struct2cell(regionprops(image_original, 'area')));
                FlameArea=max(FlameArea);
                if size(FlameArea)==0
                    FlameArea = 0.000;
                elseif FlameArea==Rez*Rez       %真っ黒写真と同じく真っ白写真も火炎面積は0と扱う
                                                %all black or all white
                                                %picture treated as no flame
                                                %shirayama
                    FlameArea=0.000;    
                end
                Radius(n,1) = sqrt(FlameArea*mm_pix/pi);
                t(n,1) = n*(1/Hz);
                serial_no(n,1) = n;
                if FlameArea == 0.000
                    LargestDiameter(n,1) = 0;
                    SmallestDiameter(n,1) = 0;
                    RatioOfDiameters(n,1) = 0;
                    Perimeter(n,1) = 0;
                    Roundness(n,1) = 0;
                else
                    cc1=bwconncomp(image_original);
                    main1=regionprops(cc1,'Area');
                    A=[main1. Area];
                    [~,biggest]=max(A);
                    image_original(labelmatrix(cc1)~=biggest)=0;
                    iii=regionprops(image_original);
                    LargestDiameter(n,1) = sqrt((cell2mat((struct2cell(regionprops(image_original, 'MajorAxisLength')))))^2*mm_pix);
                    SmallestDiameter(n,1) = sqrt((cell2mat((struct2cell(regionprops(image_original, 'MinorAxisLength')))))^2*mm_pix);
                    RatioOfDiameters(n,1) = SmallestDiameter(n,1)/LargestDiameter(n,1);
                    Perimeter(n,1) = sqrt((cell2mat((struct2cell(regionprops(image_original, 'Perimeter')))))^2*mm_pix);
                    Roundness(n,1) = 4*pi*FlameArea*mm_pix/(Perimeter(n,1))^2;
                end
                    Result = horzcat(serial_no, t, Radius, LargestDiameter,SmallestDiameter,RatioOfDiameters,Perimeter, Roundness);
            end
        end
            
        SmtRadius = smooth(Radius);
        for k = 1:3
            SmtRadius = smooth(SmtRadius);
        end
        ResultAll = horzcat(Result,SmtRadius);
        fitRadius = fit(t, SmtRadius, 'linearinterp', 'Exclude',SmtRadius < 5);
        fig = figure(2);
        set(fig,'units', 'pixels', 'OuterPosition', [0 35 450 450])
        plot(fitRadius, t, SmtRadius, 'o');
        title('Radius-time history')
        xlabel('t s')
        ylabel('Radius mm')
        Flamespeed = (differentiate(fitRadius, t))./10;
        Alpha = (20./(SmtRadius+0.00001)).*Flamespeed;
        fitResult = fit(Alpha, Flamespeed, 'poly1', 'exclude', Alpha > max(Flamespeed)*3);
        figure(2)
        fig = figure(3);
        set(fig,'units', 'pixels', 'OuterPosition', [600 35 450 450])
        plot(fitResult, Alpha, Flamespeed,'o');
        title('Flame speed vs stretch rate')
        xlabel('Stretch rate 1/s')
        ylabel('Flame speed cm/s')
        xlim([0,max(Flamespeed)*5])
        ylim([0, max(Flamespeed)*2])
        Result_Summary = horzcat(ResultAll, Alpha, Flamespeed);
        heading = {'image number', 'time [s]', 'radius [mm]','Largest Diameter [mm]','Smallest Diameter [mm]','Ratio of Diameters [-]','Perimeter [mm]', 'Roundness [-]' 'smooth radius [mm]', 'stretch rate [1/s]', 'flame speed [cm/s]'};
        Result_SummaryFinal = vertcat(cellstr(heading), num2cell(Result_Summary));
        xlswrite([file '_result.xlsx'], Result_SummaryFinal)
        T = table(Result_SummaryFinal, 'VariableNames', {'Result'});
        writetable(T,[file '.txt']);
        
        %↑ made by Okafor
        %=============================================================================
    case 'No'
        disp '☆GOOD JOB☆'
end
disp '************************* END ***************************'
